{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"C:/Users/Ruturaj/Downloads/woo-next-master/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"C:/Users/Ruturaj/Downloads/woo-next-master/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Ruturaj\\\\Downloads\\\\woo-next-master\\\\src\\\\image\\\\index.js\",\n    _this = this;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Img from 'next/image';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { DEFAULT_IMG_URL } from \"../constants/urls\";\n/**\n * Image Component.\n * We don't need to add srcSet, as Next js will generate that.\n * @see https://nextjs.org/docs/api-reference/next/image#other-props\n * @see https://nextjs.org/docs/basic-features/image-optimization#device-sizes\n *\n * @param {Object} props Component props.\n *\n * @return {jsx}\n */\n\nvar Image = function Image(props) {\n  var altText = props.altText,\n      title = props.title,\n      width = props.width,\n      height = props.height,\n      sourceUrl = props.sourceUrl,\n      className = props.className,\n      layout = props.layout,\n      objectFit = props.objectFit,\n      containerClassNames = props.containerClassNames,\n      showDefault = props.showDefault,\n      defaultImgUrl = props.defaultImgUrl,\n      rest = _objectWithoutProperties(props, [\"altText\", \"title\", \"width\", \"height\", \"sourceUrl\", \"className\", \"layout\", \"objectFit\", \"containerClassNames\", \"showDefault\", \"defaultImgUrl\"]);\n\n  if (!sourceUrl && !showDefault) {\n    return null;\n  }\n  /**\n   * If we use layout = fill then, width and height of the image cannot be used.\n   * and the image fills on the entire width and the height of its parent container.\n   * That's we need to wrap our image in a container and give it a height and width.\n   * Notice that in this case, the given height and width is being used for container and not img.\n   */\n\n\n  if ('fill' === layout) {\n    var attributes = _objectSpread({\n      alt: altText || title,\n      src: sourceUrl || (showDefault ? defaultImgUrl || DEFAULT_IMG_URL : ''),\n      layout: 'fill',\n      className: cx('object-cover', className)\n    }, rest);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cx('relative', containerClassNames),\n      children: /*#__PURE__*/_jsxDEV(Img, _objectSpread({}, attributes), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, _this);\n  } else {\n    var _attributes = _objectSpread({\n      alt: altText || title,\n      src: sourceUrl || (showDefault ? DEFAULT_IMG_URL : ''),\n      width: width || 'auto',\n      height: height || 'auto',\n      className: className\n    }, rest);\n\n    return /*#__PURE__*/_jsxDEV(Img, _objectSpread({}, _attributes), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 16\n    }, _this);\n  }\n};\n\n_c = Image;\nImage.propTypes = {\n  altText: PropTypes.string,\n  title: PropTypes.string,\n  sourceUrl: PropTypes.string,\n  layout: PropTypes.string,\n  showDefault: PropTypes.bool,\n  defaultImgUrl: PropTypes.string,\n  containerClassName: PropTypes.string,\n  className: PropTypes.string\n};\nImage.defaultProps = {\n  altText: '',\n  title: '',\n  sourceUrl: '',\n  showDefault: true,\n  defaultImgUrl: '',\n  containerClassNames: '',\n  className: 'post__image'\n};\nexport default Image;\n\nvar _c;\n\n$RefreshReg$(_c, \"Image\");","map":{"version":3,"sources":["C:/Users/Ruturaj/Downloads/woo-next-master/src/image/index.js"],"names":["Img","PropTypes","cx","DEFAULT_IMG_URL","Image","props","altText","title","width","height","sourceUrl","className","layout","objectFit","containerClassNames","showDefault","defaultImgUrl","rest","attributes","alt","src","propTypes","string","bool","containerClassName","defaultProps"],"mappings":"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","sourcesContent":["import Img from 'next/image';\n\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport {DEFAULT_IMG_URL} from \"../constants/urls\";\n\n/**\n * Image Component.\n * We don't need to add srcSet, as Next js will generate that.\n * @see https://nextjs.org/docs/api-reference/next/image#other-props\n * @see https://nextjs.org/docs/basic-features/image-optimization#device-sizes\n *\n * @param {Object} props Component props.\n *\n * @return {jsx}\n */\nconst Image = ( props ) => {\n    const {altText, title, width, height, sourceUrl, className, layout, objectFit, containerClassNames, showDefault, defaultImgUrl, ...rest} = props;\n\n    if ( ! sourceUrl && ! showDefault ) {\n        return null;\n    }\n\n    /**\n     * If we use layout = fill then, width and height of the image cannot be used.\n     * and the image fills on the entire width and the height of its parent container.\n     * That's we need to wrap our image in a container and give it a height and width.\n     * Notice that in this case, the given height and width is being used for container and not img.\n     */\n    if ( 'fill' === layout ) {\n        const attributes = {\n            alt: altText || title,\n            src: sourceUrl || ( showDefault ? ( defaultImgUrl || DEFAULT_IMG_URL ) : '' ),\n            layout: 'fill',\n            className: cx( 'object-cover', className ),\n            ...rest\n        };\n\n        return (\n            <div className={cx( 'relative', containerClassNames ) }>\n                <Img {...attributes}/>\n            </div>\n        );\n    } else {\n        const attributes = {\n            alt: altText || title,\n            src: sourceUrl || ( showDefault ? DEFAULT_IMG_URL : '' ),\n            width: width || 'auto',\n            height: height || 'auto',\n            className,\n            ...rest\n        };\n        return <Img {...attributes} />;\n    }\n};\n\nImage.propTypes = {\n    altText: PropTypes.string,\n    title: PropTypes.string,\n    sourceUrl: PropTypes.string,\n    layout: PropTypes.string,\n    showDefault: PropTypes.bool,\n    defaultImgUrl: PropTypes.string,\n    containerClassName: PropTypes.string,\n    className: PropTypes.string\n};\n\nImage.defaultProps = {\n    altText: '',\n    title: '',\n    sourceUrl: '',\n    showDefault: true,\n    defaultImgUrl: '',\n    containerClassNames: '',\n    className: 'post__image',\n};\n\nexport default Image;\n"]},"metadata":{},"sourceType":"module"}