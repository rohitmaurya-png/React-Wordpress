{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ruturaj\\\\Downloads\\\\woo-next-master\\\\src\\\\components\\\\cart\\\\cart-page\\\\CartItem.js\";\nimport { useState } from 'react';\nimport { v4 } from \"uuid\";\nimport { getUpdatedItems } from \"../../../functions\";\nimport { Cross, Loading } from \"../../icons\";\n\nconst CartItem = ({\n  item,\n  products,\n  updateCartProcessing,\n  handleRemoveProductClick,\n  updateCart\n}) => {\n  const {\n    0: productCount,\n    1: setProductCount\n  } = useState(item.qty);\n  /*\n   * When user changes the qty from product input update the cart in localStorage\n   * Also update the cart in global context\n   *\n   * @param {Object} event event\n   *\n   * @return {void}\n   */\n\n  const handleQtyChange = (event, cartKey) => {\n    if (false) {\n      event.stopPropagation(); // If the previous update cart mutation request is still processing, then return.\n\n      if (updateCartProcessing) {\n        return;\n      } // If the user tries to delete the count of product, set that to 1 by default ( This will not allow him to reduce it less than zero )\n\n\n      const newQty = event.target.value ? parseInt(event.target.value) : 1; // Set the new qty in state.\n\n      setProductCount(newQty);\n\n      if (products.length) {\n        const updatedItems = getUpdatedItems(products, newQty, cartKey);\n        updateCart({\n          variables: {\n            input: {\n              clientMutationId: v4(),\n              items: updatedItems\n            }\n          }\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    className: \"woo-next-cart-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n      className: \"woo-next-cart-element woo-next-cart-el-close\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"woo-next-cart-close-icon cursor-pointer\",\n        onClick: event => handleRemoveProductClick(event, item.cartKey, products),\n        children: /*#__PURE__*/_jsxDEV(Cross, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      className: \"woo-next-cart-element\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        width: \"64\",\n        src: item.image.sourceUrl,\n        srcSet: item.image.srcSet,\n        alt: item.image.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      className: \"woo-next-cart-element\",\n      children: item.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      className: \"woo-next-cart-element\",\n      children: 'string' !== typeof item.price ? item.price.toFixed(2) : item.price\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      className: \"woo-next-cart-element woo-next-cart-qty\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        min: \"1\",\n        \"data-cart-key\": item.cartKey,\n        className: `woo-next-cart-qty-input form-control ${updateCartProcessing ? 'opacity-25 cursor-not-allowed' : ''} `,\n        value: productCount,\n        onChange: event => handleQtyChange(event, item.cartKey)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      className: \"woo-next-cart-element\",\n      children: 'string' !== typeof item.totalPrice ? item.totalPrice.toFixed(2) : item.totalPrice\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 4\n    }, this)]\n  }, item.productId, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 3\n  }, this);\n};\n\nexport default CartItem;","map":{"version":3,"sources":["C:/Users/Ruturaj/Downloads/woo-next-master/src/components/cart/cart-page/CartItem.js"],"names":["useState","v4","getUpdatedItems","Cross","Loading","CartItem","item","products","updateCartProcessing","handleRemoveProductClick","updateCart","productCount","setProductCount","qty","handleQtyChange","event","cartKey","stopPropagation","newQty","target","value","parseInt","length","updatedItems","variables","input","clientMutationId","items","image","sourceUrl","srcSet","title","name","price","toFixed","totalPrice","productId"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { v4 } from \"uuid\";\nimport { getUpdatedItems } from \"../../../functions\";\nimport {Cross, Loading} from \"../../icons\";\n\nconst CartItem = ( {\n\t                   item,\n\t                   products,\n\t\t\t\t\t   updateCartProcessing,\n\t                   handleRemoveProductClick,\n\t                   updateCart,\n                   } ) => {\n\n\tconst [productCount, setProductCount] = useState( item.qty );\n\n\t/*\n\t * When user changes the qty from product input update the cart in localStorage\n\t * Also update the cart in global context\n\t *\n\t * @param {Object} event event\n\t *\n\t * @return {void}\n\t */\n\tconst handleQtyChange = ( event, cartKey ) => {\n\n\t\tif ( process.browser ) {\n\n\t\t\tevent.stopPropagation();\n\n\t\t\t// If the previous update cart mutation request is still processing, then return.\n\t\t\tif ( updateCartProcessing ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If the user tries to delete the count of product, set that to 1 by default ( This will not allow him to reduce it less than zero )\n\t\t\tconst newQty = ( event.target.value ) ? parseInt( event.target.value ) : 1;\n\n\t\t\t// Set the new qty in state.\n\t\t\tsetProductCount( newQty );\n\n\t\t\tif ( products.length ) {\n\n\t\t\t\tconst updatedItems = getUpdatedItems( products, newQty, cartKey );\n\n\t\t\t\tupdateCart( {\n\t\t\t\t\tvariables: {\n\t\t\t\t\t\tinput: {\n\t\t\t\t\t\t\tclientMutationId: v4(),\n\t\t\t\t\t\t\titems: updatedItems\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t} );\n\t\t\t}\n\n\t\t}\n\t};\n\n\n\treturn (\n\t\t<tr className=\"woo-next-cart-item\" key={ item.productId }>\n\t\t\t<th className=\"woo-next-cart-element woo-next-cart-el-close\">\n\t\t\t\t{/* Remove item */}\n\t\t\t\t<span className=\"woo-next-cart-close-icon cursor-pointer\"\n\t\t\t\t      onClick={ ( event ) => handleRemoveProductClick( event, item.cartKey, products ) }>\n\t\t\t\t\t<Cross/>\n\t\t\t\t</span>\n\t\t\t</th>\n\t\t\t<td className=\"woo-next-cart-element\">\n\t\t\t\t<img width=\"64\" src={ item.image.sourceUrl } srcSet={ item.image.srcSet } alt={ item.image.title }/>\n\t\t\t</td>\n\t\t\t<td className=\"woo-next-cart-element\">{ item.name }</td>\n\t\t\t<td className=\"woo-next-cart-element\">{ ( 'string' !== typeof item.price ) ? item.price.toFixed( 2 ) : item.price }</td>\n\n\t\t\t{/* Qty Input */ }\n\t\t\t<td className=\"woo-next-cart-element woo-next-cart-qty\">\n\t\t\t\t{/* @TODO Need to update this with graphQL query */ }\n\t\t\t\t<input\n\t\t\t\t\ttype=\"number\"\n\t\t\t\t\tmin=\"1\"\n\t\t\t\t\tdata-cart-key={ item.cartKey }\n\t\t\t\t\tclassName={ `woo-next-cart-qty-input form-control ${ updateCartProcessing ? 'opacity-25 cursor-not-allowed' : '' } ` }\n\t\t\t\t\tvalue={ productCount }\n\t\t\t\t\tonChange={ ( event ) => handleQtyChange( event, item.cartKey ) }\n\t\t\t\t/>\n\t\t\t</td>\n\t\t\t<td className=\"woo-next-cart-element\">\n\t\t\t\t{ ( 'string' !== typeof item.totalPrice ) ? item.totalPrice.toFixed( 2 ) : item.totalPrice }\n\t\t\t</td>\n\t\t</tr>\n\t)\n};\n\nexport default CartItem;\n"]},"metadata":{},"sourceType":"module"}