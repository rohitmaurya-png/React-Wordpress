{"ast":null,"code":"import _defineProperty from \"C:/Users/Ruturaj/Downloads/woo-next-master/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"C:/Users/Ruturaj/Downloads/woo-next-master/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/Ruturaj/Downloads/woo-next-master/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport client from \"../components/ApolloClient\";\nimport GET_STATES from \"../queries/get-states\";\n/**\n * Get states\n *\n * @param {String} countryCode Country code\n *\n * @returns {Promise<void>}\n */\n\nexport var getStates = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(countryCode) {\n    var _data$wooStates$state, _data$wooStates;\n\n    var _yield$client$query, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return client.query({\n              query: GET_STATES,\n              variables: {\n                countryCode: countryCode || ''\n              }\n            });\n\n          case 2:\n            _yield$client$query = _context.sent;\n            data = _yield$client$query.data;\n            return _context.abrupt(\"return\", (_data$wooStates$state = data === null || data === void 0 ? void 0 : (_data$wooStates = data.wooStates) === null || _data$wooStates === void 0 ? void 0 : _data$wooStates.states) !== null && _data$wooStates$state !== void 0 ? _data$wooStates$state : []);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getStates(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * Set states for the country.\n *\n * @param {Object} target Target.\n * @param {Function} setTheStates React useState function to set the value of the states basis country selection.\n * @param {Function} setIsFetchingStates React useState function, to manage loading state when request is in process.\n *\n * @return {Promise<void>}\n */\n\nexport var setStatesForCountry = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(target, setTheStates, setIsFetchingStates) {\n    var countryCode, states;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!('country' === target.name)) {\n              _context2.next = 8;\n              break;\n            }\n\n            setIsFetchingStates(true);\n            countryCode = target[target.selectedIndex].getAttribute('data-countrycode');\n            _context2.next = 5;\n            return getStates(countryCode);\n\n          case 5:\n            states = _context2.sent;\n            setTheStates(states || []);\n            setIsFetchingStates(false);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function setStatesForCountry(_x2, _x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var handleBillingDifferentThanShipping = function handleBillingDifferentThanShipping(input, setInput, target) {\n  var newState = _objectSpread(_objectSpread({}, input), {}, _defineProperty({}, target.name, !input.billingDifferentThanShipping));\n\n  setInput(newState);\n};\nexport var handleCreateAccount = function handleCreateAccount(input, setInput, target) {\n  var newState = _objectSpread(_objectSpread({}, input), {}, _defineProperty({}, target.name, !input.createAccount));\n\n  setInput(newState);\n};","map":{"version":3,"sources":["C:/Users/Ruturaj/Downloads/woo-next-master/src/utils/checkout.js"],"names":["client","GET_STATES","getStates","countryCode","query","variables","data","wooStates","states","setStatesForCountry","target","setTheStates","setIsFetchingStates","name","selectedIndex","getAttribute","handleBillingDifferentThanShipping","input","setInput","newState","billingDifferentThanShipping","handleCreateAccount","createAccount"],"mappings":";;;;;;;;AAAA,OAAOA,MAAP,MAAmB,4BAAnB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,SAAS;AAAA,sEAAG,iBAAQC,WAAR;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACEH,MAAM,CAACI,KAAP,CAAc;AACjCA,cAAAA,KAAK,EAAEH,UAD0B;AAEjCI,cAAAA,SAAS,EAAE;AAAEF,gBAAAA,WAAW,EAAEA,WAAW,IAAI;AAA9B;AAFsB,aAAd,CADF;;AAAA;AAAA;AACbG,YAAAA,IADa,uBACbA,IADa;AAAA,sEAMdA,IANc,aAMdA,IANc,0CAMdA,IAAI,CAAEC,SANQ,oDAMd,gBAAiBC,MANH,yEAMa,EANb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATN,SAAS;AAAA;AAAA;AAAA,GAAf;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMO,mBAAmB;AAAA,uEAAG,kBAAQC,MAAR,EAAgBC,YAAhB,EAA8BC,mBAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAC1B,cAAcF,MAAM,CAACG,IADK;AAAA;AAAA;AAAA;;AAE3BD,YAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACMT,YAAAA,WAHqB,GAGPO,MAAM,CAACA,MAAM,CAACI,aAAR,CAAN,CAA6BC,YAA7B,CAA0C,kBAA1C,CAHO;AAAA;AAAA,mBAINb,SAAS,CAAEC,WAAF,CAJH;;AAAA;AAIrBK,YAAAA,MAJqB;AAK3BG,YAAAA,YAAY,CAAEH,MAAM,IAAI,EAAZ,CAAZ;AACAI,YAAAA,mBAAmB,CAAC,KAAD,CAAnB;;AAN2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAnBH,mBAAmB;AAAA;AAAA;AAAA,GAAzB;AAUP,OAAO,IAAMO,kCAAkC,GAAG,SAArCA,kCAAqC,CAAEC,KAAF,EAASC,QAAT,EAAmBR,MAAnB,EAA+B;AAC7E,MAAMS,QAAQ,mCAAQF,KAAR,2BAAgBP,MAAM,CAACG,IAAvB,EAA8B,CAAEI,KAAK,CAACG,4BAAtC,EAAd;;AACAF,EAAAA,QAAQ,CAAEC,QAAF,CAAR;AACH,CAHM;AAKP,OAAO,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAEJ,KAAF,EAASC,QAAT,EAAmBR,MAAnB,EAA+B;AAC9D,MAAMS,QAAQ,mCAAQF,KAAR,2BAAgBP,MAAM,CAACG,IAAvB,EAA8B,CAAEI,KAAK,CAACK,aAAtC,EAAd;;AACAJ,EAAAA,QAAQ,CAAEC,QAAF,CAAR;AACH,CAHM","sourcesContent":["import client from \"../components/ApolloClient\";\nimport GET_STATES from \"../queries/get-states\";\n\n/**\n * Get states\n *\n * @param {String} countryCode Country code\n *\n * @returns {Promise<void>}\n */\nexport const getStates = async ( countryCode ) => {\n    const { data } = await client.query( {\n        query: GET_STATES,\n        variables: { countryCode: countryCode || '' }\n    } )\n\n    return data?.wooStates?.states ?? [];\n}\n\n/**\n * Set states for the country.\n *\n * @param {Object} target Target.\n * @param {Function} setTheStates React useState function to set the value of the states basis country selection.\n * @param {Function} setIsFetchingStates React useState function, to manage loading state when request is in process.\n *\n * @return {Promise<void>}\n */\nexport const setStatesForCountry = async ( target, setTheStates, setIsFetchingStates ) => {\n    if ( 'country' === target.name ) {\n        setIsFetchingStates(true);\n        const countryCode = target[target.selectedIndex].getAttribute('data-countrycode')\n        const states = await getStates( countryCode );\n        setTheStates( states || [] );\n        setIsFetchingStates(false);\n    }\n}\n\nexport const handleBillingDifferentThanShipping = ( input, setInput, target ) => {\n    const newState = { ...input, [target.name]: ! input.billingDifferentThanShipping };\n    setInput( newState );\n}\n\nexport const handleCreateAccount = ( input, setInput, target ) => {\n    const newState = { ...input, [target.name]: ! input.createAccount };\n    setInput( newState );\n}\n"]},"metadata":{},"sourceType":"module"}