{"ast":null,"code":"import { v4 } from 'uuid';\n/**\n * Extracts and returns float value from a string.\n *\n * @param {string} string String\n * @return {any}\n */\n\nexport const getFloatVal = string => {\n  let floatValue = string.match(/[+-]?\\d+(\\.\\d+)?/g)[0];\n  return null !== floatValue ? parseFloat(parseFloat(floatValue).toFixed(2)) : '';\n};\n/**\n * Add first product.\n *\n * @param {Object} product Product\n * @return {{totalProductsCount: number, totalProductsPrice: any, products: Array}}\n */\n\nexport const addFirstProduct = product => {\n  let productPrice = getFloatVal(product.price);\n  let newCart = {\n    products: [],\n    totalProductsCount: 1,\n    totalProductsPrice: productPrice\n  };\n  const newProduct = createNewProduct(product, productPrice, 1);\n  newCart.products.push(newProduct);\n  localStorage.setItem('woo-next-cart', JSON.stringify(newCart));\n  return newCart;\n};\n/**\n * Create a new product object.\n *\n * @param {Object} product Product\n * @param {Integer} productPrice Product Price\n * @param {Integer} qty Quantity\n * @return {{image: *, productId: *, totalPrice: number, price: *, qty: *, name: *}}\n */\n\nexport const createNewProduct = (product, productPrice, qty) => {\n  return {\n    productId: product.productId,\n    image: product.image,\n    name: product.name,\n    price: productPrice,\n    qty,\n    totalPrice: parseFloat((productPrice * qty).toFixed(2))\n  };\n};\n/**\n * Updates the existing cart with new item.\n *\n * @param {Object} existingCart Existing Cart.\n * @param {Object} product Product.\n * @param {Integer} qtyToBeAdded Quantity.\n * @param {Integer} newQty New Qty to be updated.\n * @return {{totalProductsCount: *, totalProductsPrice: *, products: *}}\n */\n\nexport const updateCart = (existingCart, product, qtyToBeAdded, newQty = false) => {\n  const updatedProducts = getUpdatedProducts(existingCart.products, product, qtyToBeAdded, newQty);\n\n  const addPrice = (total, item) => {\n    total.totalPrice += item.totalPrice;\n    total.qty += item.qty;\n    return total;\n  }; // Loop through the updated product array and add the totalPrice of each item to get the totalPrice\n\n\n  let total = updatedProducts.reduce(addPrice, {\n    totalPrice: 0,\n    qty: 0\n  });\n  const updatedCart = {\n    products: updatedProducts,\n    totalProductsCount: parseInt(total.qty),\n    totalProductsPrice: parseFloat(total.totalPrice)\n  };\n  localStorage.setItem('woo-next-cart', JSON.stringify(updatedCart));\n  return updatedCart;\n};\n/**\n * Get updated products array\n * Update the product if it exists else,\n * add the new product to existing cart,\n *\n * @param {Object} existingProductsInCart Existing product in cart\n * @param {Object} product Product\n * @param {Integer} qtyToBeAdded Quantity\n * @param {Integer} newQty New qty of the product (optional)\n * @return {*[]}\n */\n\nexport const getUpdatedProducts = (existingProductsInCart, product, qtyToBeAdded, newQty = false) => {\n  // Check if the product already exits in the cart.\n  const productExitsIndex = isProductInCart(existingProductsInCart, product.productId); // If product exits ( index of that product found in the array ), update the product quantity and totalPrice\n\n  if (-1 < productExitsIndex) {\n    let updatedProducts = existingProductsInCart;\n    let updatedProduct = updatedProducts[productExitsIndex]; // If have new qty of the product available, set that else add the qtyToBeAdded\n\n    updatedProduct.qty = newQty ? parseInt(newQty) : parseInt(updatedProduct.qty + qtyToBeAdded);\n    updatedProduct.totalPrice = parseFloat((updatedProduct.price * updatedProduct.qty).toFixed(2));\n    return updatedProducts;\n  } else {\n    // If product not found push the new product to the existing product array.\n    let productPrice = getFloatVal(product.price);\n    const newProduct = createNewProduct(product, productPrice, qtyToBeAdded);\n    existingProductsInCart.push(newProduct);\n    return existingProductsInCart;\n  }\n};\n/**\n * Returns index of the product if it exists.\n *\n * @param {Object} existingProductsInCart Existing Products.\n * @param {Integer} productId Product id.\n * @return {number | *} Index Returns -1 if product does not exist in the array, index number otherwise\n */\n\nconst isProductInCart = (existingProductsInCart, productId) => {\n  const returnItemThatExits = (item, index) => {\n    if (productId === item.productId) {\n      return item;\n    }\n  }; // This new array will only contain the product which is matched.\n\n\n  const newArray = existingProductsInCart.filter(returnItemThatExits);\n  return existingProductsInCart.indexOf(newArray[0]);\n};\n/**\n * Remove Item from the cart.\n *\n * @param {Integer} productId Product Id.\n * @return {any | string} Updated cart\n */\n\n\nexport const removeItemFromCart = productId => {\n  let existingCart = localStorage.getItem('woo-next-cart');\n  existingCart = JSON.parse(existingCart); // If there is only one item in the cart, delete the cart.\n\n  if (1 === existingCart.products.length) {\n    localStorage.removeItem('woo-next-cart');\n    return null;\n  } // Check if the product already exits in the cart.\n\n\n  const productExitsIndex = isProductInCart(existingCart.products, productId); // If product to be removed exits\n\n  if (-1 < productExitsIndex) {\n    const productTobeRemoved = existingCart.products[productExitsIndex];\n    const qtyToBeRemovedFromTotal = productTobeRemoved.qty;\n    const priceToBeDeductedFromTotal = productTobeRemoved.totalPrice; // Remove that product from the array and update the total price and total quantity of the cart\n\n    let updatedCart = existingCart;\n    updatedCart.products.splice(productExitsIndex, 1);\n    updatedCart.totalProductsCount = updatedCart.totalProductsCount - qtyToBeRemovedFromTotal;\n    updatedCart.totalProductsPrice = updatedCart.totalProductsPrice - priceToBeDeductedFromTotal;\n    localStorage.setItem('woo-next-cart', JSON.stringify(updatedCart));\n    return updatedCart;\n  } else {\n    return existingCart;\n  }\n};\n/**\n * Returns cart data in the required format.\n * @param {String} data Cart data\n */\n\nexport const getFormattedCart = data => {\n  var _data$cart$total, _data$cart;\n\n  let formattedCart = null;\n\n  if (undefined === data || !data.cart.contents.nodes.length) {\n    return formattedCart;\n  }\n\n  const givenProducts = data.cart.contents.nodes; // Create an empty object.\n\n  formattedCart = {};\n  formattedCart.products = [];\n  let totalProductsCount = 0;\n\n  for (let i = 0; i < givenProducts.length; i++) {\n    var _givenProducts$i, _givenProducts$i$prod, _givenProduct$product, _givenProducts$i$key, _givenProducts$i2, _givenProduct$name, _givenProducts$i3, _givenProducts$i$tota, _givenProducts$i4, _givenProduct$image$s, _givenProduct$image, _givenProduct$image$s2, _givenProduct$image2, _givenProduct$image$t, _givenProduct$image3, _givenProduct$image$a, _givenProduct$image4, _givenProducts$i5;\n\n    const givenProduct = givenProducts === null || givenProducts === void 0 ? void 0 : (_givenProducts$i = givenProducts[i]) === null || _givenProducts$i === void 0 ? void 0 : (_givenProducts$i$prod = _givenProducts$i.product) === null || _givenProducts$i$prod === void 0 ? void 0 : _givenProducts$i$prod.node;\n    const product = {};\n    const total = getFloatVal(givenProducts[i].total);\n    product.productId = (_givenProduct$product = givenProduct === null || givenProduct === void 0 ? void 0 : givenProduct.productId) !== null && _givenProduct$product !== void 0 ? _givenProduct$product : '';\n    product.cartKey = (_givenProducts$i$key = givenProducts === null || givenProducts === void 0 ? void 0 : (_givenProducts$i2 = givenProducts[i]) === null || _givenProducts$i2 === void 0 ? void 0 : _givenProducts$i2.key) !== null && _givenProducts$i$key !== void 0 ? _givenProducts$i$key : '';\n    product.name = (_givenProduct$name = givenProduct === null || givenProduct === void 0 ? void 0 : givenProduct.name) !== null && _givenProduct$name !== void 0 ? _givenProduct$name : '';\n    product.qty = givenProducts === null || givenProducts === void 0 ? void 0 : (_givenProducts$i3 = givenProducts[i]) === null || _givenProducts$i3 === void 0 ? void 0 : _givenProducts$i3.quantity;\n    product.price = total / (product === null || product === void 0 ? void 0 : product.qty);\n    product.totalPrice = (_givenProducts$i$tota = givenProducts === null || givenProducts === void 0 ? void 0 : (_givenProducts$i4 = givenProducts[i]) === null || _givenProducts$i4 === void 0 ? void 0 : _givenProducts$i4.total) !== null && _givenProducts$i$tota !== void 0 ? _givenProducts$i$tota : '';\n    product.image = {\n      sourceUrl: (_givenProduct$image$s = givenProduct === null || givenProduct === void 0 ? void 0 : (_givenProduct$image = givenProduct.image) === null || _givenProduct$image === void 0 ? void 0 : _givenProduct$image.sourceUrl) !== null && _givenProduct$image$s !== void 0 ? _givenProduct$image$s : '',\n      srcSet: (_givenProduct$image$s2 = givenProduct === null || givenProduct === void 0 ? void 0 : (_givenProduct$image2 = givenProduct.image) === null || _givenProduct$image2 === void 0 ? void 0 : _givenProduct$image2.srcSet) !== null && _givenProduct$image$s2 !== void 0 ? _givenProduct$image$s2 : '',\n      title: (_givenProduct$image$t = givenProduct === null || givenProduct === void 0 ? void 0 : (_givenProduct$image3 = givenProduct.image) === null || _givenProduct$image3 === void 0 ? void 0 : _givenProduct$image3.title) !== null && _givenProduct$image$t !== void 0 ? _givenProduct$image$t : '',\n      altText: (_givenProduct$image$a = givenProduct === null || givenProduct === void 0 ? void 0 : (_givenProduct$image4 = givenProduct.image) === null || _givenProduct$image4 === void 0 ? void 0 : _givenProduct$image4.altText) !== null && _givenProduct$image$a !== void 0 ? _givenProduct$image$a : ''\n    };\n    totalProductsCount += givenProducts === null || givenProducts === void 0 ? void 0 : (_givenProducts$i5 = givenProducts[i]) === null || _givenProducts$i5 === void 0 ? void 0 : _givenProducts$i5.quantity; // Push each item into the products array.\n\n    formattedCart.products.push(product);\n  }\n\n  formattedCart.totalProductsCount = totalProductsCount;\n  formattedCart.totalProductsPrice = (_data$cart$total = data === null || data === void 0 ? void 0 : (_data$cart = data.cart) === null || _data$cart === void 0 ? void 0 : _data$cart.total) !== null && _data$cart$total !== void 0 ? _data$cart$total : '';\n  return formattedCart;\n};\nexport const createCheckoutData = order => {\n  var _order$shipping, _order$shipping2, _order$shipping3, _order$shipping4, _order$shipping5, _order$shipping6, _order$shipping7, _order$shipping8, _order$shipping9, _order$shipping10, _order$shipping11;\n\n  // Set the billing Data to shipping, if applicable.\n  const billingData = order.billingDifferentThanShipping ? order.billing : order.shipping;\n  const checkoutData = {\n    clientMutationId: v4(),\n    shipping: {\n      firstName: order === null || order === void 0 ? void 0 : (_order$shipping = order.shipping) === null || _order$shipping === void 0 ? void 0 : _order$shipping.firstName,\n      lastName: order === null || order === void 0 ? void 0 : (_order$shipping2 = order.shipping) === null || _order$shipping2 === void 0 ? void 0 : _order$shipping2.lastName,\n      address1: order === null || order === void 0 ? void 0 : (_order$shipping3 = order.shipping) === null || _order$shipping3 === void 0 ? void 0 : _order$shipping3.address1,\n      address2: order === null || order === void 0 ? void 0 : (_order$shipping4 = order.shipping) === null || _order$shipping4 === void 0 ? void 0 : _order$shipping4.address2,\n      city: order === null || order === void 0 ? void 0 : (_order$shipping5 = order.shipping) === null || _order$shipping5 === void 0 ? void 0 : _order$shipping5.city,\n      country: order === null || order === void 0 ? void 0 : (_order$shipping6 = order.shipping) === null || _order$shipping6 === void 0 ? void 0 : _order$shipping6.country,\n      state: order === null || order === void 0 ? void 0 : (_order$shipping7 = order.shipping) === null || _order$shipping7 === void 0 ? void 0 : _order$shipping7.state,\n      postcode: order === null || order === void 0 ? void 0 : (_order$shipping8 = order.shipping) === null || _order$shipping8 === void 0 ? void 0 : _order$shipping8.postcode,\n      email: order === null || order === void 0 ? void 0 : (_order$shipping9 = order.shipping) === null || _order$shipping9 === void 0 ? void 0 : _order$shipping9.email,\n      phone: order === null || order === void 0 ? void 0 : (_order$shipping10 = order.shipping) === null || _order$shipping10 === void 0 ? void 0 : _order$shipping10.phone,\n      company: order === null || order === void 0 ? void 0 : (_order$shipping11 = order.shipping) === null || _order$shipping11 === void 0 ? void 0 : _order$shipping11.company\n    },\n    billing: {\n      firstName: billingData === null || billingData === void 0 ? void 0 : billingData.firstName,\n      lastName: billingData === null || billingData === void 0 ? void 0 : billingData.lastName,\n      address1: billingData === null || billingData === void 0 ? void 0 : billingData.address1,\n      address2: billingData === null || billingData === void 0 ? void 0 : billingData.address2,\n      city: billingData === null || billingData === void 0 ? void 0 : billingData.city,\n      country: billingData === null || billingData === void 0 ? void 0 : billingData.country,\n      state: billingData === null || billingData === void 0 ? void 0 : billingData.state,\n      postcode: billingData === null || billingData === void 0 ? void 0 : billingData.postcode,\n      email: billingData === null || billingData === void 0 ? void 0 : billingData.email,\n      phone: billingData === null || billingData === void 0 ? void 0 : billingData.phone,\n      company: billingData === null || billingData === void 0 ? void 0 : billingData.company\n    },\n    shipToDifferentAddress: order.billingDifferentThanShipping,\n    paymentMethod: order.paymentMethod,\n    isPaid: false\n  };\n\n  if (order.createAccount) {\n    checkoutData.account = {\n      username: order.username,\n      password: order.password\n    };\n  }\n\n  return checkoutData;\n};\n/**\n * Get the updated items in the below format required for mutation input.\n *\n * [\n * { \"key\": \"33e75ff09dd601bbe6dd51039152189\", \"quantity\": 1 },\n * { \"key\": \"02e74f10e0327ad868d38f2b4fdd6f0\", \"quantity\": 1 },\n * ]\n *\n * Creates an array in above format with the newQty (updated Qty ).\n *\n */\n\nexport const getUpdatedItems = (products, newQty, cartKey) => {\n  // Create an empty array.\n  const updatedItems = []; // Loop through the product array.\n\n  products.map(cartItem => {\n    // If you find the cart key of the product user is trying to update, push the key and new qty.\n    if (cartItem.cartKey === cartKey) {\n      updatedItems.push({\n        key: cartItem.cartKey,\n        quantity: parseInt(newQty)\n      }); // Otherwise just push the existing qty without updating.\n    } else {\n      updatedItems.push({\n        key: cartItem.cartKey,\n        quantity: cartItem.qty\n      });\n    }\n  }); // Return the updatedItems array with new Qtys.\n\n  return updatedItems;\n};","map":{"version":3,"sources":["C:/Users/Ruturaj/Downloads/woo-next-master/src/functions.js"],"names":["v4","getFloatVal","string","floatValue","match","parseFloat","toFixed","addFirstProduct","product","productPrice","price","newCart","products","totalProductsCount","totalProductsPrice","newProduct","createNewProduct","push","localStorage","setItem","JSON","stringify","qty","productId","image","name","totalPrice","updateCart","existingCart","qtyToBeAdded","newQty","updatedProducts","getUpdatedProducts","addPrice","total","item","reduce","updatedCart","parseInt","existingProductsInCart","productExitsIndex","isProductInCart","updatedProduct","returnItemThatExits","index","newArray","filter","indexOf","removeItemFromCart","getItem","parse","length","removeItem","productTobeRemoved","qtyToBeRemovedFromTotal","priceToBeDeductedFromTotal","splice","getFormattedCart","data","formattedCart","undefined","cart","contents","nodes","givenProducts","i","givenProduct","node","cartKey","key","quantity","sourceUrl","srcSet","title","altText","createCheckoutData","order","billingData","billingDifferentThanShipping","billing","shipping","checkoutData","clientMutationId","firstName","lastName","address1","address2","city","country","state","postcode","email","phone","company","shipToDifferentAddress","paymentMethod","isPaid","createAccount","account","username","password","getUpdatedItems","updatedItems","map","cartItem"],"mappings":"AAAA,SAASA,EAAT,QAAmB,MAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAKC,MAAF,IAAc;AAExC,MAAIC,UAAU,GAAGD,MAAM,CAACE,KAAP,CAAc,mBAAd,EAAoC,CAApC,CAAjB;AACA,SAAS,SAASD,UAAX,GAA0BE,UAAU,CAAEA,UAAU,CAAEF,UAAF,CAAV,CAAyBG,OAAzB,CAAkC,CAAlC,CAAF,CAApC,GAAgF,EAAvF;AAEA,CALM;AAOP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,eAAe,GAAKC,OAAF,IAAe;AAE7C,MAAIC,YAAY,GAAGR,WAAW,CAAEO,OAAO,CAACE,KAAV,CAA9B;AAEA,MAAIC,OAAO,GAAG;AACbC,IAAAA,QAAQ,EAAE,EADG;AAEbC,IAAAA,kBAAkB,EAAE,CAFP;AAGbC,IAAAA,kBAAkB,EAAEL;AAHP,GAAd;AAMA,QAAMM,UAAU,GAAGC,gBAAgB,CAAER,OAAF,EAAWC,YAAX,EAAyB,CAAzB,CAAnC;AACAE,EAAAA,OAAO,CAACC,QAAR,CAAiBK,IAAjB,CAAuBF,UAAvB;AAEAG,EAAAA,YAAY,CAACC,OAAb,CAAsB,eAAtB,EAAuCC,IAAI,CAACC,SAAL,CAAgBV,OAAhB,CAAvC;AAEA,SAAOA,OAAP;AACA,CAhBM;AAkBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMK,gBAAgB,GAAG,CAAER,OAAF,EAAWC,YAAX,EAAyBa,GAAzB,KAAkC;AAEjE,SAAQ;AACPC,IAAAA,SAAS,EAAEf,OAAO,CAACe,SADZ;AAEPC,IAAAA,KAAK,EAAEhB,OAAO,CAACgB,KAFR;AAGPC,IAAAA,IAAI,EAAEjB,OAAO,CAACiB,IAHP;AAIPf,IAAAA,KAAK,EAAED,YAJA;AAKPa,IAAAA,GALO;AAMPI,IAAAA,UAAU,EAAErB,UAAU,CAAE,CAAEI,YAAY,GAAGa,GAAjB,EAAuBhB,OAAvB,CAAgC,CAAhC,CAAF;AANf,GAAR;AASA,CAXM;AAaP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMqB,UAAU,GAAG,CAAEC,YAAF,EAAgBpB,OAAhB,EAAyBqB,YAAzB,EAAuCC,MAAM,GAAG,KAAhD,KAA4D;AAErF,QAAMC,eAAe,GAAGC,kBAAkB,CAAEJ,YAAY,CAAChB,QAAf,EAA0BJ,OAA1B,EAAmCqB,YAAnC,EAAiDC,MAAjD,CAA1C;;AAEA,QAAMG,QAAQ,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACjCD,IAAAA,KAAK,CAACR,UAAN,IAAoBS,IAAI,CAACT,UAAzB;AACAQ,IAAAA,KAAK,CAACZ,GAAN,IAAaa,IAAI,CAACb,GAAlB;AAEA,WAAOY,KAAP;AACA,GALD,CAJqF,CAWrF;;;AACA,MAAIA,KAAK,GAAGH,eAAe,CAACK,MAAhB,CAAwBH,QAAxB,EAAkC;AAAEP,IAAAA,UAAU,EAAE,CAAd;AAAiBJ,IAAAA,GAAG,EAAE;AAAtB,GAAlC,CAAZ;AAEA,QAAMe,WAAW,GAAG;AACnBzB,IAAAA,QAAQ,EAAEmB,eADS;AAEnBlB,IAAAA,kBAAkB,EAAEyB,QAAQ,CAAEJ,KAAK,CAACZ,GAAR,CAFT;AAGnBR,IAAAA,kBAAkB,EAAET,UAAU,CAAE6B,KAAK,CAACR,UAAR;AAHX,GAApB;AAMAR,EAAAA,YAAY,CAACC,OAAb,CAAsB,eAAtB,EAAuCC,IAAI,CAACC,SAAL,CAAgBgB,WAAhB,CAAvC;AAEA,SAAOA,WAAP;AACA,CAvBM;AAyBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAML,kBAAkB,GAAG,CAAEO,sBAAF,EAA0B/B,OAA1B,EAAmCqB,YAAnC,EAAiDC,MAAM,GAAG,KAA1D,KAAqE;AAEtG;AACA,QAAMU,iBAAiB,GAAGC,eAAe,CAAEF,sBAAF,EAA0B/B,OAAO,CAACe,SAAlC,CAAzC,CAHsG,CAKtG;;AACA,MAAK,CAAC,CAAD,GAAKiB,iBAAV,EAA8B;AAC7B,QAAIT,eAAe,GAAGQ,sBAAtB;AACA,QAAIG,cAAc,GAAGX,eAAe,CAAES,iBAAF,CAApC,CAF6B,CAI7B;;AACAE,IAAAA,cAAc,CAACpB,GAAf,GAAuBQ,MAAF,GAAaQ,QAAQ,CAAER,MAAF,CAArB,GAAkCQ,QAAQ,CAAEI,cAAc,CAACpB,GAAf,GAAqBO,YAAvB,CAA/D;AACAa,IAAAA,cAAc,CAAChB,UAAf,GAA4BrB,UAAU,CAAE,CAAEqC,cAAc,CAAChC,KAAf,GAAuBgC,cAAc,CAACpB,GAAxC,EAA8ChB,OAA9C,CAAuD,CAAvD,CAAF,CAAtC;AAEA,WAAQyB,eAAR;AACA,GATD,MASO;AAEN;AACA,QAAItB,YAAY,GAAGR,WAAW,CAAEO,OAAO,CAACE,KAAV,CAA9B;AACA,UAAMK,UAAU,GAAGC,gBAAgB,CAAER,OAAF,EAAWC,YAAX,EAAyBoB,YAAzB,CAAnC;AACAU,IAAAA,sBAAsB,CAACtB,IAAvB,CAA6BF,UAA7B;AAEA,WAAOwB,sBAAP;AACA;AACD,CAxBM;AA0BP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAME,eAAe,GAAG,CAAEF,sBAAF,EAA0BhB,SAA1B,KAAyC;AAEhE,QAAMoB,mBAAmB,GAAG,CAAER,IAAF,EAAQS,KAAR,KAAmB;AAC9C,QAAKrB,SAAS,KAAKY,IAAI,CAACZ,SAAxB,EAAoC;AACnC,aAAOY,IAAP;AACA;AACD,GAJD,CAFgE,CAQhE;;;AACA,QAAMU,QAAQ,GAAGN,sBAAsB,CAACO,MAAvB,CAA+BH,mBAA/B,CAAjB;AAEA,SAAOJ,sBAAsB,CAACQ,OAAvB,CAAgCF,QAAQ,CAAC,CAAD,CAAxC,CAAP;AACA,CAZD;AAcA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMG,kBAAkB,GAAKzB,SAAF,IAAiB;AAElD,MAAIK,YAAY,GAAGV,YAAY,CAAC+B,OAAb,CAAsB,eAAtB,CAAnB;AACArB,EAAAA,YAAY,GAAGR,IAAI,CAAC8B,KAAL,CAAYtB,YAAZ,CAAf,CAHkD,CAKlD;;AACA,MAAK,MAAMA,YAAY,CAAChB,QAAb,CAAsBuC,MAAjC,EAA0C;AAEzCjC,IAAAA,YAAY,CAACkC,UAAb,CAAyB,eAAzB;AACA,WAAO,IAAP;AAEA,GAXiD,CAalD;;;AACA,QAAMZ,iBAAiB,GAAGC,eAAe,CAAEb,YAAY,CAAChB,QAAf,EAAyBW,SAAzB,CAAzC,CAdkD,CAgBlD;;AACA,MAAK,CAAC,CAAD,GAAKiB,iBAAV,EAA8B;AAE7B,UAAMa,kBAAkB,GAAGzB,YAAY,CAAChB,QAAb,CAAuB4B,iBAAvB,CAA3B;AACA,UAAMc,uBAAuB,GAAGD,kBAAkB,CAAC/B,GAAnD;AACA,UAAMiC,0BAA0B,GAAGF,kBAAkB,CAAC3B,UAAtD,CAJ6B,CAM7B;;AACA,QAAIW,WAAW,GAAGT,YAAlB;AACAS,IAAAA,WAAW,CAACzB,QAAZ,CAAqB4C,MAArB,CAA6BhB,iBAA7B,EAAgD,CAAhD;AACAH,IAAAA,WAAW,CAACxB,kBAAZ,GAAiCwB,WAAW,CAACxB,kBAAZ,GAAiCyC,uBAAlE;AACAjB,IAAAA,WAAW,CAACvB,kBAAZ,GAAiCuB,WAAW,CAACvB,kBAAZ,GAAiCyC,0BAAlE;AAEArC,IAAAA,YAAY,CAACC,OAAb,CAAsB,eAAtB,EAAuCC,IAAI,CAACC,SAAL,CAAgBgB,WAAhB,CAAvC;AACA,WAAOA,WAAP;AAEA,GAfD,MAeO;AACN,WAAOT,YAAP;AACA;AACD,CAnCM;AAqCP;AACA;AACA;AACA;;AACA,OAAO,MAAM6B,gBAAgB,GAAKC,IAAF,IAAY;AAAA;;AAE3C,MAAIC,aAAa,GAAG,IAApB;;AAEA,MAAKC,SAAS,KAAKF,IAAd,IAAsB,CAAEA,IAAI,CAACG,IAAL,CAAUC,QAAV,CAAmBC,KAAnB,CAAyBZ,MAAtD,EAA+D;AAC9D,WAAOQ,aAAP;AACA;;AAED,QAAMK,aAAa,GAAGN,IAAI,CAACG,IAAL,CAAUC,QAAV,CAAmBC,KAAzC,CAR2C,CAU3C;;AACAJ,EAAAA,aAAa,GAAG,EAAhB;AACAA,EAAAA,aAAa,CAAC/C,QAAd,GAAyB,EAAzB;AACA,MAAIC,kBAAkB,GAAG,CAAzB;;AAEA,OAAK,IAAIoD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,aAAa,CAACb,MAAlC,EAA0Cc,CAAC,EAA3C,EAAiD;AAAA;;AAChD,UAAMC,YAAY,GAAGF,aAAH,aAAGA,aAAH,2CAAGA,aAAa,CAAIC,CAAJ,CAAhB,8EAAG,iBAAsBzD,OAAzB,0DAAG,sBAA+B2D,IAApD;AACA,UAAM3D,OAAO,GAAG,EAAhB;AACA,UAAM0B,KAAK,GAAGjC,WAAW,CAAE+D,aAAa,CAAEC,CAAF,CAAb,CAAmB/B,KAArB,CAAzB;AAEA1B,IAAAA,OAAO,CAACe,SAAR,4BAAoB2C,YAApB,aAAoBA,YAApB,uBAAoBA,YAAY,CAAE3C,SAAlC,yEAA+C,EAA/C;AACAf,IAAAA,OAAO,CAAC4D,OAAR,2BAAkBJ,aAAlB,aAAkBA,aAAlB,4CAAkBA,aAAa,CAAIC,CAAJ,CAA/B,sDAAkB,kBAAsBI,GAAxC,uEAA+C,EAA/C;AACA7D,IAAAA,OAAO,CAACiB,IAAR,yBAAeyC,YAAf,aAAeA,YAAf,uBAAeA,YAAY,CAAEzC,IAA7B,mEAAqC,EAArC;AACAjB,IAAAA,OAAO,CAACc,GAAR,GAAc0C,aAAd,aAAcA,aAAd,4CAAcA,aAAa,CAAIC,CAAJ,CAA3B,sDAAc,kBAAsBK,QAApC;AACA9D,IAAAA,OAAO,CAACE,KAAR,GAAgBwB,KAAK,IAAG1B,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEc,GAAZ,CAArB;AACAd,IAAAA,OAAO,CAACkB,UAAR,4BAAqBsC,aAArB,aAAqBA,aAArB,4CAAqBA,aAAa,CAAIC,CAAJ,CAAlC,sDAAqB,kBAAsB/B,KAA3C,yEAAoD,EAApD;AACA1B,IAAAA,OAAO,CAACgB,KAAR,GAAgB;AACf+C,MAAAA,SAAS,2BAAEL,YAAF,aAAEA,YAAF,8CAAEA,YAAY,CAAE1C,KAAhB,wDAAE,oBAAqB+C,SAAvB,yEAAoC,EAD9B;AAEfC,MAAAA,MAAM,4BAAEN,YAAF,aAAEA,YAAF,+CAAEA,YAAY,CAAE1C,KAAhB,yDAAE,qBAAqBgD,MAAvB,2EAAiC,EAFxB;AAGfC,MAAAA,KAAK,2BAAEP,YAAF,aAAEA,YAAF,+CAAEA,YAAY,CAAE1C,KAAhB,yDAAE,qBAAqBiD,KAAvB,yEAAgC,EAHtB;AAIfC,MAAAA,OAAO,2BAAER,YAAF,aAAEA,YAAF,+CAAEA,YAAY,CAAE1C,KAAhB,yDAAE,qBAAqBkD,OAAvB,yEAAkC;AAJ1B,KAAhB;AAOA7D,IAAAA,kBAAkB,IAAImD,aAAJ,aAAIA,aAAJ,4CAAIA,aAAa,CAAIC,CAAJ,CAAjB,sDAAI,kBAAsBK,QAA5C,CAlBgD,CAoBhD;;AACAX,IAAAA,aAAa,CAAC/C,QAAd,CAAuBK,IAAvB,CAA6BT,OAA7B;AACA;;AAEDmD,EAAAA,aAAa,CAAC9C,kBAAd,GAAmCA,kBAAnC;AACA8C,EAAAA,aAAa,CAAC7C,kBAAd,uBAAmC4C,IAAnC,aAAmCA,IAAnC,qCAAmCA,IAAI,CAAEG,IAAzC,+CAAmC,WAAY3B,KAA/C,+DAAwD,EAAxD;AAEA,SAAOyB,aAAP;AAEA,CA5CM;AA8CP,OAAO,MAAMgB,kBAAkB,GAAKC,KAAF,IAAa;AAAA;;AAE9C;AACA,QAAMC,WAAW,GAAGD,KAAK,CAACE,4BAAN,GAAqCF,KAAK,CAACG,OAA3C,GAAqDH,KAAK,CAACI,QAA/E;AAEA,QAAMC,YAAY,GAAG;AACpBC,IAAAA,gBAAgB,EAAElF,EAAE,EADA;AAEpBgF,IAAAA,QAAQ,EAAE;AACTG,MAAAA,SAAS,EAAEP,KAAF,aAAEA,KAAF,0CAAEA,KAAK,CAAEI,QAAT,oDAAE,gBAAiBG,SADnB;AAETC,MAAAA,QAAQ,EAAER,KAAF,aAAEA,KAAF,2CAAEA,KAAK,CAAEI,QAAT,qDAAE,iBAAiBI,QAFlB;AAGTC,MAAAA,QAAQ,EAAET,KAAF,aAAEA,KAAF,2CAAEA,KAAK,CAAEI,QAAT,qDAAE,iBAAiBK,QAHlB;AAITC,MAAAA,QAAQ,EAAEV,KAAF,aAAEA,KAAF,2CAAEA,KAAK,CAAEI,QAAT,qDAAE,iBAAiBM,QAJlB;AAKTC,MAAAA,IAAI,EAAEX,KAAF,aAAEA,KAAF,2CAAEA,KAAK,CAAEI,QAAT,qDAAE,iBAAiBO,IALd;AAMTC,MAAAA,OAAO,EAAEZ,KAAF,aAAEA,KAAF,2CAAEA,KAAK,CAAEI,QAAT,qDAAE,iBAAiBQ,OANjB;AAOTC,MAAAA,KAAK,EAAEb,KAAF,aAAEA,KAAF,2CAAEA,KAAK,CAAEI,QAAT,qDAAE,iBAAiBS,KAPf;AAQTC,MAAAA,QAAQ,EAAEd,KAAF,aAAEA,KAAF,2CAAEA,KAAK,CAAEI,QAAT,qDAAE,iBAAiBU,QARlB;AASTC,MAAAA,KAAK,EAAEf,KAAF,aAAEA,KAAF,2CAAEA,KAAK,CAAEI,QAAT,qDAAE,iBAAiBW,KATf;AAUTC,MAAAA,KAAK,EAAEhB,KAAF,aAAEA,KAAF,4CAAEA,KAAK,CAAEI,QAAT,sDAAE,kBAAiBY,KAVf;AAWTC,MAAAA,OAAO,EAAEjB,KAAF,aAAEA,KAAF,4CAAEA,KAAK,CAAEI,QAAT,sDAAE,kBAAiBa;AAXjB,KAFU;AAepBd,IAAAA,OAAO,EAAE;AACRI,MAAAA,SAAS,EAAEN,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAEM,SADhB;AAERC,MAAAA,QAAQ,EAAEP,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAEO,QAFf;AAGRC,MAAAA,QAAQ,EAAER,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAEQ,QAHf;AAIRC,MAAAA,QAAQ,EAAET,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAES,QAJf;AAKRC,MAAAA,IAAI,EAAEV,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAEU,IALX;AAMRC,MAAAA,OAAO,EAAEX,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAEW,OANd;AAORC,MAAAA,KAAK,EAAEZ,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAEY,KAPZ;AAQRC,MAAAA,QAAQ,EAAEb,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAEa,QARf;AASRC,MAAAA,KAAK,EAAEd,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAEc,KATZ;AAURC,MAAAA,KAAK,EAAEf,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAEe,KAVZ;AAWRC,MAAAA,OAAO,EAAEhB,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAEgB;AAXd,KAfW;AA4BpBC,IAAAA,sBAAsB,EAAElB,KAAK,CAACE,4BA5BV;AA6BpBiB,IAAAA,aAAa,EAAEnB,KAAK,CAACmB,aA7BD;AA8BpBC,IAAAA,MAAM,EAAE;AA9BY,GAArB;;AAiCA,MAAIpB,KAAK,CAACqB,aAAV,EAAyB;AACxBhB,IAAAA,YAAY,CAACiB,OAAb,GAAuB;AACtBC,MAAAA,QAAQ,EAAEvB,KAAK,CAACuB,QADM;AAEtBC,MAAAA,QAAQ,EAAExB,KAAK,CAACwB;AAFM,KAAvB;AAIA;;AAED,SAAOnB,YAAP;AACA,CA9CM;AAgDP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMoB,eAAe,GAAG,CAAEzF,QAAF,EAAYkB,MAAZ,EAAoBsC,OAApB,KAAiC;AAE/D;AACA,QAAMkC,YAAY,GAAG,EAArB,CAH+D,CAK/D;;AACA1F,EAAAA,QAAQ,CAAC2F,GAAT,CAAgBC,QAAF,IAAgB;AAE7B;AACA,QAAKA,QAAQ,CAACpC,OAAT,KAAqBA,OAA1B,EAAoC;AAEnCkC,MAAAA,YAAY,CAACrF,IAAb,CAAmB;AAClBoD,QAAAA,GAAG,EAAEmC,QAAQ,CAACpC,OADI;AAElBE,QAAAA,QAAQ,EAAEhC,QAAQ,CAAER,MAAF;AAFA,OAAnB,EAFmC,CAOnC;AACA,KARD,MAQO;AACNwE,MAAAA,YAAY,CAACrF,IAAb,CAAmB;AAClBoD,QAAAA,GAAG,EAAEmC,QAAQ,CAACpC,OADI;AAElBE,QAAAA,QAAQ,EAAEkC,QAAQ,CAAClF;AAFD,OAAnB;AAIA;AACD,GAjBD,EAN+D,CAyB/D;;AACA,SAAOgF,YAAP;AAEA,CA5BM","sourcesContent":["import { v4 } from 'uuid';\n\n/**\n * Extracts and returns float value from a string.\n *\n * @param {string} string String\n * @return {any}\n */\nexport const getFloatVal = ( string ) => {\n\n\tlet floatValue = string.match( /[+-]?\\d+(\\.\\d+)?/g )[0];\n\treturn ( null !== floatValue ) ? parseFloat( parseFloat( floatValue ).toFixed( 2 ) ) : '';\n\n};\n\n/**\n * Add first product.\n *\n * @param {Object} product Product\n * @return {{totalProductsCount: number, totalProductsPrice: any, products: Array}}\n */\nexport const addFirstProduct = ( product ) => {\n\n\tlet productPrice = getFloatVal( product.price );\n\n\tlet newCart = {\n\t\tproducts: [],\n\t\ttotalProductsCount: 1,\n\t\ttotalProductsPrice: productPrice\n\t};\n\n\tconst newProduct = createNewProduct( product, productPrice, 1 );\n\tnewCart.products.push( newProduct );\n\n\tlocalStorage.setItem( 'woo-next-cart', JSON.stringify( newCart ) );\n\n\treturn newCart;\n};\n\n/**\n * Create a new product object.\n *\n * @param {Object} product Product\n * @param {Integer} productPrice Product Price\n * @param {Integer} qty Quantity\n * @return {{image: *, productId: *, totalPrice: number, price: *, qty: *, name: *}}\n */\nexport const createNewProduct = ( product, productPrice, qty ) => {\n\n\treturn  {\n\t\tproductId: product.productId,\n\t\timage: product.image,\n\t\tname: product.name,\n\t\tprice: productPrice,\n\t\tqty,\n\t\ttotalPrice: parseFloat( ( productPrice * qty ).toFixed( 2 ) )\n\t};\n\n};\n\n/**\n * Updates the existing cart with new item.\n *\n * @param {Object} existingCart Existing Cart.\n * @param {Object} product Product.\n * @param {Integer} qtyToBeAdded Quantity.\n * @param {Integer} newQty New Qty to be updated.\n * @return {{totalProductsCount: *, totalProductsPrice: *, products: *}}\n */\nexport const updateCart = ( existingCart, product, qtyToBeAdded, newQty = false  ) => {\n\n\tconst updatedProducts = getUpdatedProducts( existingCart.products , product, qtyToBeAdded, newQty );\n\n\tconst addPrice = (total, item) => {\n\t\ttotal.totalPrice += item.totalPrice;\n\t\ttotal.qty += item.qty;\n\n\t\treturn total;\n\t};\n\n\t// Loop through the updated product array and add the totalPrice of each item to get the totalPrice\n\tlet total = updatedProducts.reduce( addPrice, { totalPrice: 0, qty: 0 } );\n\n\tconst updatedCart = {\n\t\tproducts: updatedProducts,\n\t\ttotalProductsCount: parseInt( total.qty ),\n\t\ttotalProductsPrice: parseFloat( total.totalPrice )\n\t};\n\n\tlocalStorage.setItem( 'woo-next-cart', JSON.stringify( updatedCart ) );\n\n\treturn updatedCart;\n};\n\n/**\n * Get updated products array\n * Update the product if it exists else,\n * add the new product to existing cart,\n *\n * @param {Object} existingProductsInCart Existing product in cart\n * @param {Object} product Product\n * @param {Integer} qtyToBeAdded Quantity\n * @param {Integer} newQty New qty of the product (optional)\n * @return {*[]}\n */\nexport const getUpdatedProducts = ( existingProductsInCart, product, qtyToBeAdded, newQty = false ) => {\n\n\t// Check if the product already exits in the cart.\n\tconst productExitsIndex = isProductInCart( existingProductsInCart, product.productId );\n\n\t// If product exits ( index of that product found in the array ), update the product quantity and totalPrice\n\tif ( -1 < productExitsIndex ) {\n\t\tlet updatedProducts = existingProductsInCart;\n\t\tlet updatedProduct = updatedProducts[ productExitsIndex ];\n\n\t\t// If have new qty of the product available, set that else add the qtyToBeAdded\n\t\tupdatedProduct.qty = ( newQty ) ? parseInt( newQty ) : parseInt( updatedProduct.qty + qtyToBeAdded );\n\t\tupdatedProduct.totalPrice = parseFloat( ( updatedProduct.price * updatedProduct.qty ).toFixed( 2 ) );\n\n\t\treturn  updatedProducts;\n\t} else {\n\n\t\t// If product not found push the new product to the existing product array.\n\t\tlet productPrice = getFloatVal( product.price );\n\t\tconst newProduct = createNewProduct( product, productPrice, qtyToBeAdded );\n\t\texistingProductsInCart.push( newProduct );\n\n\t\treturn existingProductsInCart;\n\t}\n};\n\n/**\n * Returns index of the product if it exists.\n *\n * @param {Object} existingProductsInCart Existing Products.\n * @param {Integer} productId Product id.\n * @return {number | *} Index Returns -1 if product does not exist in the array, index number otherwise\n */\nconst isProductInCart = ( existingProductsInCart, productId ) => {\n\n\tconst returnItemThatExits = ( item, index ) => {\n\t\tif ( productId === item.productId ) {\n\t\t\treturn item;\n\t\t}\n\t};\n\n\t// This new array will only contain the product which is matched.\n\tconst newArray = existingProductsInCart.filter( returnItemThatExits );\n\n\treturn existingProductsInCart.indexOf( newArray[0] );\n};\n\n/**\n * Remove Item from the cart.\n *\n * @param {Integer} productId Product Id.\n * @return {any | string} Updated cart\n */\nexport const removeItemFromCart = ( productId ) => {\n\n\tlet existingCart = localStorage.getItem( 'woo-next-cart' );\n\texistingCart = JSON.parse( existingCart );\n\n\t// If there is only one item in the cart, delete the cart.\n\tif ( 1 === existingCart.products.length ) {\n\n\t\tlocalStorage.removeItem( 'woo-next-cart' );\n\t\treturn null;\n\n\t}\n\n\t// Check if the product already exits in the cart.\n\tconst productExitsIndex = isProductInCart( existingCart.products, productId );\n\n\t// If product to be removed exits\n\tif ( -1 < productExitsIndex ) {\n\n\t\tconst productTobeRemoved = existingCart.products[ productExitsIndex ];\n\t\tconst qtyToBeRemovedFromTotal = productTobeRemoved.qty;\n\t\tconst priceToBeDeductedFromTotal = productTobeRemoved.totalPrice;\n\n\t\t// Remove that product from the array and update the total price and total quantity of the cart\n\t\tlet updatedCart = existingCart;\n\t\tupdatedCart.products.splice( productExitsIndex, 1 );\n\t\tupdatedCart.totalProductsCount = updatedCart.totalProductsCount - qtyToBeRemovedFromTotal;\n\t\tupdatedCart.totalProductsPrice = updatedCart.totalProductsPrice - priceToBeDeductedFromTotal;\n\n\t\tlocalStorage.setItem( 'woo-next-cart', JSON.stringify( updatedCart ) );\n\t\treturn updatedCart;\n\n\t} else {\n\t\treturn existingCart;\n\t}\n};\n\n/**\n * Returns cart data in the required format.\n * @param {String} data Cart data\n */\nexport const getFormattedCart = ( data ) => {\n\n\tlet formattedCart = null;\n\n\tif ( undefined === data || ! data.cart.contents.nodes.length ) {\n\t\treturn formattedCart;\n\t}\n\n\tconst givenProducts = data.cart.contents.nodes;\n\n\t// Create an empty object.\n\tformattedCart = {};\n\tformattedCart.products = [];\n\tlet totalProductsCount = 0;\n\n\tfor( let i = 0; i < givenProducts.length; i++  ) {\n\t\tconst givenProduct = givenProducts?.[ i ]?.product?.node;\n\t\tconst product = {};\n\t\tconst total = getFloatVal( givenProducts[ i ].total );\n\n\t\tproduct.productId = givenProduct?.productId ?? '';\n\t\tproduct.cartKey = givenProducts?.[ i ]?.key ?? '';\n\t\tproduct.name = givenProduct?.name ?? '';\n\t\tproduct.qty = givenProducts?.[ i ]?.quantity;\n\t\tproduct.price = total / product?.qty;\n\t\tproduct.totalPrice = givenProducts?.[ i ]?.total ?? '';\n\t\tproduct.image = {\n\t\t\tsourceUrl: givenProduct?.image?.sourceUrl ?? '',\n\t\t\tsrcSet: givenProduct?.image?.srcSet ?? '',\n\t\t\ttitle: givenProduct?.image?.title ?? '',\n\t\t\taltText: givenProduct?.image?.altText ?? ''\n\t\t};\n\n\t\ttotalProductsCount += givenProducts?.[ i ]?.quantity;\n\n\t\t// Push each item into the products array.\n\t\tformattedCart.products.push( product );\n\t}\n\n\tformattedCart.totalProductsCount = totalProductsCount;\n\tformattedCart.totalProductsPrice = data?.cart?.total ?? '';\n\n\treturn formattedCart;\n\n};\n\nexport const createCheckoutData = ( order ) => {\n\n\t// Set the billing Data to shipping, if applicable.\n\tconst billingData = order.billingDifferentThanShipping ? order.billing : order.shipping;\n\n\tconst checkoutData = {\n\t\tclientMutationId: v4(),\n\t\tshipping: {\n\t\t\tfirstName: order?.shipping?.firstName,\n\t\t\tlastName: order?.shipping?.lastName,\n\t\t\taddress1: order?.shipping?.address1,\n\t\t\taddress2: order?.shipping?.address2,\n\t\t\tcity: order?.shipping?.city,\n\t\t\tcountry: order?.shipping?.country,\n\t\t\tstate: order?.shipping?.state,\n\t\t\tpostcode: order?.shipping?.postcode,\n\t\t\temail: order?.shipping?.email,\n\t\t\tphone: order?.shipping?.phone,\n\t\t\tcompany: order?.shipping?.company,\n\t\t},\n\t\tbilling: {\n\t\t\tfirstName: billingData?.firstName,\n\t\t\tlastName: billingData?.lastName,\n\t\t\taddress1: billingData?.address1,\n\t\t\taddress2: billingData?.address2,\n\t\t\tcity: billingData?.city,\n\t\t\tcountry: billingData?.country,\n\t\t\tstate: billingData?.state,\n\t\t\tpostcode: billingData?.postcode,\n\t\t\temail: billingData?.email,\n\t\t\tphone: billingData?.phone,\n\t\t\tcompany: billingData?.company,\n\t\t},\n\t\tshipToDifferentAddress: order.billingDifferentThanShipping,\n\t\tpaymentMethod: order.paymentMethod,\n\t\tisPaid: false,\n\t};\n\n\tif (order.createAccount) {\n\t\tcheckoutData.account = {\n\t\t\tusername: order.username,\n\t\t\tpassword: order.password,\n\t\t};\n\t}\n\n\treturn checkoutData;\n};\n\n/**\n * Get the updated items in the below format required for mutation input.\n *\n * [\n * { \"key\": \"33e75ff09dd601bbe6dd51039152189\", \"quantity\": 1 },\n * { \"key\": \"02e74f10e0327ad868d38f2b4fdd6f0\", \"quantity\": 1 },\n * ]\n *\n * Creates an array in above format with the newQty (updated Qty ).\n *\n */\nexport const getUpdatedItems = ( products, newQty, cartKey ) => {\n\n\t// Create an empty array.\n\tconst updatedItems = [];\n\n\t// Loop through the product array.\n\tproducts.map( ( cartItem ) => {\n\n\t\t// If you find the cart key of the product user is trying to update, push the key and new qty.\n\t\tif ( cartItem.cartKey === cartKey ) {\n\n\t\t\tupdatedItems.push( {\n\t\t\t\tkey: cartItem.cartKey,\n\t\t\t\tquantity: parseInt( newQty )\n\t\t\t} );\n\n\t\t\t// Otherwise just push the existing qty without updating.\n\t\t} else {\n\t\t\tupdatedItems.push( {\n\t\t\t\tkey: cartItem.cartKey,\n\t\t\t\tquantity: cartItem.qty\n\t\t\t} );\n\t\t}\n\t} );\n\n\t// Return the updatedItems array with new Qtys.\n\treturn updatedItems;\n\n};\n"]},"metadata":{},"sourceType":"module"}